apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: ab3-eks
  region: us-east-2

vpc:
  subnets:
    #id: "vpc-0dd338ecf29863c55"  # (optional, must match VPC ID used for each subnet below)
    #cidr: "192.168.0.0/16"       # (optional, must match CIDR used by the given VPC)

    private:
      us-east-2a: { id: subnet-01eb2a7c22a4f09d1 }
      us-east-2b: { id: subnet-0039e648983daf21d }
      us-east-2c: { id: subnet-089ab81ead92052fc }

    public:
      us-east-2a: { id: subnet-06438666e92427fe7 }
      us-east-2b: { id: subnet-0c2cb15860fb9d5b9 }
      us-east-2c: { id: subnet-0af25c96891aed5c4 }

addons:
- name: vpc-cni
  attachPolicyARNs:
    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy 

managedNodeGroups:
  - name: managed-ng-1
    instanceType: t3.large
    minSize: 3
    maxSize: 6
    availabilityZones: ["us-east-2a", "us-east-2b", "us-east-2c"]
    desiredCapacity: 3
    volumeSize: 20
    labels: {role: worker}
    tags:
      nodegroup-role: worker
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/cluster-13: "owned"
    iam:
      withAddonPolicies:
        autoScaler: true

nodeGroups:
  - name: ng-1
    labels: { role: builders }
    instanceType: m5.large
    desiredCapacity: 3